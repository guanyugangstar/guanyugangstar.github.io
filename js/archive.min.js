/*
 * Credits: this script is shamelessly borrowed from
 * https://github.com/kitian616/jekyll-TeXt-theme
 */
!function(){
    // 解析 URL 参数的函数
    function n(){
        for(var n=0,t={},i=window.location.search.substring(1).split("&"),o=0;o<i.length;o++){
            var a=i[o].split("=");
            void 0===t[a[0]]?t[a[0]]=a[1]:"string"==typeof t[a[0]]?t[a[0]]=[t[a[0]],a[1]]:t[a[0]].push(a[1]);
        }
        return t;
    }

    // 创建修改 URL 的函数
    var t=function(){
        var n=window.location.href.split("?")[0];
        return function(t){
            "string"==typeof t?window.history.replaceState(null,"",n+t):window.history.replaceState(null,"",n);
        };
    }();

    $(document).ready(function(){
        var i=$(".js-tags"),
            o=i.find(".tag-button"),
            a=i.find(".tag-button--all"),
            r=$(".js-result"),
            d=r.find("section"),
            s=[],
            l=null,
            c=[];

        // 计算每个 section 中 item 的累计数量
        !function(){
            for(var n,t=0,i=0;t<d.length;t++){
                c.push(i);
                i+=d.eq(t).find(".item").length;
            }
            c.push(i);
        }();

        // 将每个 section 中的 item 存入数组
        d.each(function(){
            s.push($(this).find(".item"));
        });

        // 根据标签获取对应的按钮
        function u(n){
            if(!n) return a;
            var t=o.filter('[data-encode="'+n+'"]');
            return 0===t.length?a:t;
        }

        // 处理按钮焦点状态
        function f(n){
            n&&($lastFocusButton&&!$lastFocusButton.is(n)&&(l.removeClass("focus"),n.addClass("focus")),l=n);
        }

        // 根据标签过滤显示的 item
        function h(n,t){
            var i={},o,a,r;
            for(o=0;o<s.length;o++){
                for(a=s[o],r=0;r<a.length;r++){
                    if(""===n||void 0===n){
                        i[o]||(i[o]={});
                        i[o][r]=!0;
                    }else{
                        for(var d=a.eq(r).data("tags").split(","),l=0;l<d.length;l++){
                            if(d[l]===n){
                                i[o]||(i[o]={});
                                i[o][r]=!0;
                                break;
                            }
                        }
                    }
                }
            }
            for(o=0;o<s.length;o++){
                if(i[o]){
                    d.eq(o).removeClass("d-none");
                }else{
                    d.eq(o).addClass("d-none");
                }
                for(a=0;a<s[o].length;a++){
                    if(i[o]&&i[o][a]){
                        s[o].eq(a).removeClass("d-none");
                    }else{
                        s[o].eq(a).addClass("d-none");
                    }
                }
            }
        }

        if(void 0===r||r.length<=0||r.hasClass("d-none")){
            r.removeClass("d-none");
            // 此处原代码存在逻辑混乱，下面重新梳理并修正
            var getParams = function(){
                var t=n(), i=t.tag;
                return i;
            };
            var tag = getParams();
            h(tag, function(n){
                "string"==typeof n?window.history.replaceState(null,"",window.location.href.split("?")[0]+n):window.history.replaceState(null,"",window.location.href.split("?")[0]);
            });
            // 由于 $(this) 在当前上下文中无意义，此处注释掉错误调用
            // function n(t,i){
            //     var o,a,r,d,l,c=t.data("encode");
            //     (o=i).addClass("focus");
            //     $lastFocusButton&&!$lastFocusButton.is(o)&&$lastFocusButton.removeClass("focus");
            //     l=o;
            //     void 0===(r=c)||"string"!=typeof r?history.replaceState(null,"",location.pathname):history.replaceState(null,"",(location.pathname,"?tag="+r));
            // }($(this),$(this));
        }
    });
}();
